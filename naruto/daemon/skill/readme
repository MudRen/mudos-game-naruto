技能統一使用的被動能力數值影響相關函式
==============================================================================================
☉ int intimidate(object me, int ability, int type) { return ability; }
   攻擊技巧影響
      ability: 戰鬥系統計算過後的數值
         type: 是否是戰鬥精靈呼叫, 1: 是
                                   0: 不是 (主要是給 score 指令用)
   若沒有影響則直接回傳 ability

   註： 一點的 dex 或是 str 增加一點的攻擊技巧，應設定合理的數值

☉ int wittiness(object me, int ability, int type) { return ability; }
   防禦技巧影響

   註： 一點的 int 或是 con 增加一點的防禦技巧，應設定合理的數值

☉ int exact(object me, object target, int ability, int type)
   命中率影響

   註： 二點的 int 增加一點命中，二點的 dex 增加三點命中
        平均相當為一點的 int 或 dex 增加一點的命中，應設定合理的數值

☉ int evade(object me, object target, int ability, int type) { return ability; }
   迴避率影響

   註： 二點的 int 增加三點迴避，二點的 dex 增加一點迴避
        平均相當為一點的 int 或 dex 增加一點的迴避，應設定合理的數值

☉ int attack(object me, object target, int ability, int type) { return ability; }
   攻擊力影響

   註： 一點 str 增加三點的攻擊力，應設定合理的數值

☉ int defend(object me, object target, int ability, int type) { return ability; }
   防禦力影響

   註： 一點 con 增加三點的防禦力，應設定合理的數值

☉ int sock(object me, object target, int ability, int type) { return ability; }
   致命一擊機率影響

☉ int sockPower(object me, object target, int ability, int type) { return ability; }
   在產生致命一擊後，所提升的傷害%數 (原始為150%)

如果技能中，某個能力完全沒有影響的話，就不必撰寫該函式，以節省CPU計算時間。



技能統一使用的特殊功能函式
==============================================================================================
☉ int receiveDamage(object me, object target, int damage, string type) { return damage; }
   受到傷害前，讓技能先跑過 receive_damage 
   如何便可以製作 "暫時無敵技" 或是 "傷害吸收盾" 之類的技能

☉ void perform_action(object me, string act, object target) {}
   手動特攻

如果技能中，這些特殊功能都沒有用到，就不必撰寫該函式，以節省CPU計算時間。



技能需要 enable 於基本技的相關函式
==============================================================================================
☉ int valid_enable(string base_skill) { return base_skill == SKILL_BASE; }
   系統用於驗證是否需要 enable 且是 enable 在哪個技能上

☉ string getCombatAction(object me, object weapon)
   若技能是 enable 在基本技「combat」上的話，便必需建立這個函式，用來提供攻擊出招時的訊息
   (如此可以替代系統預設的攻擊訊息，使技能設計更多樣化)

☉ string getEvadeAction(object me)
   若技能是 enable 在基本技「dodge」上的話，便必需建立這個函式，用來提供迴避攻擊時的訊息
   (如此可以替代系統預設的迴避訊息，使技能設計更多樣化)

☉ getDefendAction(object me)
   若技能是 enable 在基本技「parry」上的話，便必需建立這個函式，用來提供防禦攻擊時的訊息
   (如此可以替代系統預設的防禦訊息，使技能設計更多樣化)

如果技能中，這些特殊功能都沒有用到，就不必撰寫該函式，以節省CPU計算時間。
